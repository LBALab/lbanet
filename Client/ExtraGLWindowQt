/*
------------------------[ Lbanet Source ]-------------------------
Copyright (C) 2009
Author: Vivien Delage [Rincevent_123]
Email : vdelage@gmail.com

-------------------------------[ GNU License ]-------------------------------

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

-----------------------------------------------------------------------------
*/

#ifndef OSGVIEWER_EXTERNALWINDOWQT
#define OSGVIEWER_EXTERNALWINDOWQT

#include <QtGui/QWidget>
#include <QtGui/QInputEvent>
#include <QtOpenGL/QGLWidget>
#include <osgViewer/GraphicsWindow>


enum XtGLw_state {XtGLw_Off, XtGLw_Text, XtGLw_Image};
enum XtGLw_fadingstate {XtGLw_FDOff, XtGLw_FDIn, XtGLw_FDOut};

class FONT_FONT;

class ExtraGLWidget : public QGLWidget
{
public:
	ExtraGLWidget(QWidget* parent=0);

	virtual ~ExtraGLWidget();

	void initializeGL();
	void resizeGL(int w, int h);
	void paintGL();

	void PressedSpace();

	void Process(double tnow, float tdiff);


	void StartScrollingText(const std::string & imagepath, const std::vector<long> textIds);


	void StartFixedImage(const std::string & imagepath, long NbSecondDisplay, 
								bool FadeIn, float FadeInColorR, float FadeInColorG, float FadeInColorB,
								bool FadeOut, float FadeOutColorR, float FadeOutColorG, float FadeOutColorB);

protected:
		
	void write_line_black(std::string text, FONT_FONT &font, 
								double x, double y, double space_size, int nbchar);

	void write_line_white(std::string text, FONT_FONT &font, 
								double x, double y, double space_size, int nbchar);

	void write_text_white(std::string text, FONT_FONT &font, 
								double x, double y, double maxlenght, int maxchar);

	void write_text_black(std::string text, FONT_FONT &font, 
								double x, double y, double maxlenght, int maxchar);



	void CreateFont(int size);

	void DeleteFont();

	// load image to texture
	void LoadGLTextures(const std::string& name);

	void CleanImageTexture();


	// clean up
	void CleanUp();

	// clean up display and report terminaison
	void CleanAndReport();

	//! display image if exist
	void DrawBGImage(float alpha);

private:
	float			_bgR;
	float			_bgG;
	float			_bgB;
	float			_bgA;

	bool			_fontloaded;
	FONT_FONT *		_loadedfont;
	GLuint			_textureid;

	bool			_imageloaded;
	GLuint			_imgtextureid;

	int				_windowW;
	int				_windowH;

	XtGLw_state			_currentstate;
	XtGLw_fadingstate	_currentfadestate;

	bool			_scrolling;
	float			_scrollingtimediff;
	std::vector<std::string>	_texts;
	int							_textidx;

	double			_textfinishdisplaytime;
	bool			_fadingin;
	bool			_fadingout;
	float			_fiR;
	float			_fiG;
	float			_fiB;
	float			_foR;
	float			_foG;
	float			_foB;
	float			_currentalpha;
};

#endif
